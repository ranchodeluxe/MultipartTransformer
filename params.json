{"name":"Multipart Transformer -- An Experiment in QGIS Python API 2.x","tagline":"QGIS plugin that takes multi-part polygons and converts them to single-part geometries","body":"### Intro\r\nThanks for this opportunity. I only get a chance to build QGIS plugins once in awhile and it's always fun to learn new things about the API.\r\n\r\n### Initial Approach\r\nI'm an idealist and my first approach did not take time constraints or the real world into account. Here's my original road map for the tool:\r\n\r\n```\r\n1. The tool will take input from TOC layers or directories\r\n2. The tool will flag input QgsVectorLayers ( of any dataProvider type ) in the related family of QGis.WKBMultiPolygon's\r\n3. It will add flagged inputs to a QListWidget Item\r\n4. After a user select's an item we'll walk them through an editing workflow, which will include...\r\n5. A choice to transform multi-part polygons with one of the many existing multi-part editing tools, or... \r\n6. A choice to fix multi-part polygons in place. By \"in place\" I mean we would not solve the problem by exporting all the layer's features to a new datasource. Rather, we would remove the multi-part record, break it up and append it to the existing datasource with the fields intact. \r\n7. The tool should work with QGIS version from 1.8 through 2.x nightly build. I wanted to do this because I don't know a single soul using version 2.x\r\n```\r\n\r\n### Hurdles\r\nI quickly discovered issues with the above road map while testing against [InaSAFE's data repo](https://github.com/AIFDR/inasafe_data). \r\n\r\nItem `2` above misses the fact that shapefiles have no concept of MultiPolygoness even after being read by OGR. This means we cannot quickly flag shapefiles by a layer-level attribute. I realized we'd have to loop through *all* layer features hunting for a multi-part geometry to flag them correctly. In combination with the size of some [InaSAFE shapefiles](https://github.com/AIFDR/inasafe_data/blob/master/exposure/OSM_structures_indonesia_20121005.shp), it became apparent that any feature looping would have to be threaded -- both for multi-part flagging and multi-part fixing. Because of this issue i decided to abandon the idea of working with *all* QgsVectorLayer data providers and to focus exclusively on shapefiles.\r\n\r\nItem `5` above was unnecessary so i abandoned it. I attempted to tackle item `6` but found myself spending too much time on the implementation because of some new API areas. I decided exporting all features was a nice fallback to get this thing done.\r\n\r\n### QGIS Versions Tested\r\n\r\nIn it's current state, the plugin works across the QGIS major release from 1.99 to 2.x. It has been tested on the following platforms:\r\n\r\n1. Ubuntu 12.10 w/ QGIS 2.x Nightly Build --> PASS\r\n2. Ubuntu 12.04 w/ QGIS v1.9 --> PASS\r\n3. Mac OSX w/ QGIS v1.8 --> FAIL: Logging doesn't seem to work and you can only choose your browse directory once\r\n\r\n### Plugins XML\r\nThis plugin can be loaded with the QGIS Python Plugin manager by adding the [plugins.xml URL over here](http://qgisplugin.inasafe.osgeohacks.com/plugins.xml) to the list of repositories.\r\n\r\n### Technical Pain Points for Improvement\r\nHere's some thoughts on how the plugin code can be improved:\r\n\r\n1. \r\n\r\n### Authors and Contributors\r\nGreg Corradini (@thebigspoon) and thanks to Aaron Racicot (@aaronr) for his quick testing","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}